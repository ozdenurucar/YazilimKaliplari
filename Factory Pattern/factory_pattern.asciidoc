== Factory Pattern

Genel hatlarıyla fabrika tasarım kalıbı oluşturulan bir interface sınıftan veya abstract sınıftan türetilen başka bir sınıf oluşturma işlemidir. Aynı özelliği kullanmak isteyen sınıflar tarafından kullanılır.

Random Rapidly Tree kullanarak yapılacak yol planlama projesinde factory pattern kullanımı sesli bildirim için kullanılmıştır.


Projenin factory pattern zorunluluğu yoktur.

[source,c++]
----

//Factory Pattern
#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sstream>
#include <iostream>
#include <string>
#include <vector>

#include "nav_msgs/OccupancyGrid.h"
#include "geometry_msgs/PointStamped.h"
#include "std_msgs/Header.h"
#include "nav_msgs/MapMetaData.h"
#include "geometry_msgs/Point.h"

class Notification  <1> 
{
public:
	virtual void Alarm() {}
};

class BatteryAlert : public Notification <2> 
{
	//Batarya alarminin frekansi dusuk olacak
public:
	void Alarm()
	{
		std::cout << "Battery Alert!" << std::endl;
	}
};
class CollisionAlert : public Notification <3> 
{
	//Carpisma alarminin frekansi yuksek olacak
public:
	void Alarm()
	{
		std::cout << "Collision Alert!" << std::endl;
	}
};


int main()
{
	
}
----

<1> Bildirim için oluşturulan ana sınıf.
<2> Bataryaya özelleştirilmiş ve bildirim sınıfından türetilmiş sınıf.
<3> Çarpışma kontrolü için özelleştirilmiş ve bildirim sınıfından türetilmiş sınıf.
